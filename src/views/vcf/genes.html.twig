{% set title = 'Genes | proyecto' %}
{% set header = 'Genes' %}
{% set header_opt = 'Genes afectados por las variantes de un solo nucle√≥tido'  %}
{% set active_menu = 'genes' %}
{% set breadcrumbs = ['VCF','Genes',] %}

{% extends 'layout.html.twig' %}


{% block content %}


    <h4>Se encontraron {{ vcf.genes | length }} genes influenciados por las variantes en su archivo.</h4>

    <div class="row">
        <div class="col-md-6">
            <div id="chrom-bubbles"></div>
        </div>
            
        <div class="col-md-6">
            <div class="table-responsive" style="max-height:600px;overflow-y:scroll;">
                <table class="table table-striped table-bordered table-condensed table-hover">
                    <tr>
                      <th>Chr</th>
                      <th>Gen</th>
                      <th>#</th>
                    </tr>
                    {% for chrom in vcf.chroms %}
                        {% for gen in chrom.genes %}
                        <tr>
                            <td>{{ chrom['chrom'] }}</td>
                            <td>
                                <div class="btn-group">
                                  <button aria-expanded="false" type="button" class="btn btn-default btn-xs btn-flat dropdown-toggle" data-toggle="dropdown">
                                    {{ gen['ID'] }}
                                    <span class="caret"></span>
                                    <span class="sr-only">Toggle Dropdown</span>
                                  </button>
                                  <ul class="dropdown-menu" role="menu">
                                    <li><a href="http://www.ncbi.nlm.nih.gov/gene?term={{ gen['ID'] }}[sym]+AND+Homo+sapiens[Organism]" target="_blank">Ver en NCBI <i class="fa fa-fw fa-external-link"></i></a></li>
                                    <li><a href="http://www.ensembl.org/Homo_sapiens/Gene/Summary?g={{ gen['ID'] }}" target="_blank">Ver en Ensembl <i class="fa fa-fw fa-external-link"></i></a></li>
                                  </ul>
                              </div>
                            </td>
                            <td>{{ gen['size'] }}</td>
                        </tr>
                        {% endfor %}
                    {% endfor %}
                </table>
            </div>
        </div>
{% endblock %}


{% block scripts %}
   <script type="text/javascript" src="/resources/d3/d3.v3.min.js"></script>
   <script type="text/javascript">
    //sacar despues manejar los id por session de usuario
    //usuario -> iduser -> vcf_files -> idvcf 
    //////////////////////
    function qs(key) {
        key = key.replace(/[*+?^$.\[\]{}()|\\\/]/g, "\\$&"); // escape RegEx meta chars
        var match = location.search.match(new RegExp("[?&]"+key+"=([^&]+)(&|$)"));
        return match && decodeURIComponent(match[1].replace(/\+/g, " "));
    }
    var idvcf = qs('id');
    var GENE_BUBBLES_JSON_URL = "/d3/chrom_bubbles?id="+idvcf;
    //////////////////////
    
    
    var diameter = 600,
        format = d3.format(",d"),
        color = d3.scale.category20c();
    
    var bubble = d3.layout.pack()
        .sort(null)
        .size([diameter, diameter])
        .padding(1.5);
    
    var svg = d3.select("#chrom-bubbles").append("svg")
        .attr("width", diameter)
        .attr("height", diameter)
        .attr("class", "bubble");
    
    d3.json(GENE_BUBBLES_JSON_URL, function(error, root) {
      if (error) throw error;
    
      var node = svg.selectAll(".node")
          .data(bubble.nodes(classes(root))
          .filter(function(d) { return !d.children; }))
        .enter().append("g")
          .attr("class", "node")
          .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
    
      node.append("title")
          .text(function(d) { return d.className + ": " + format(d.value); });
    
      node.append("circle")
          .attr("r", function(d) { return d.r; })
          .style("fill", function(d) { return color(d.packageName); });
    
      node.append("text")
          .attr("dy", ".3em")
          .style("text-anchor", "middle")
          .text(function(d) { return d.className.substring(0, d.r / 3); });
    });
    
    // Returns a flattened hierarchy containing all leaf nodes under the root.
    function classes(root) {
      var classes = [];
    
      function recurse(name, node) {
        if (node.children) node.children.forEach(function(child) { recurse(node.name, child); });
        else classes.push({packageName: name, className: node.name, value: node.size});
      }
    
      recurse(null, root);
      return {children: classes};
    }
    
    d3.select(self.frameElement).style("height", diameter + "px");
    
    </script>
   </script>
{% endblock %}